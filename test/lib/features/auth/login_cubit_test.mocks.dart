// Mocks generated by Mockito 5.0.17 from annotations
// in fixit/test/lib/features/auth/login_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:ui' as _i10;

import 'package:auto_route/auto_route.dart' as _i4;
import 'package:auto_route/src/matcher/route_matcher.dart' as _i3;
import 'package:auto_route/src/router/controller/pageless_routes_observer.dart'
    as _i6;
import 'package:auto_route/src/router/controller/routing_controller.dart'
    as _i8;
import 'package:fixit/routes/app_router.dart' as _i7;
import 'package:fixit/routes/guards/auth_guard.dart' as _i2;
import 'package:flutter/cupertino.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAuthGuard_0 extends _i1.Fake implements _i2.AuthGuard {}

class _FakeRouteMatcher_1 extends _i1.Fake implements _i3.RouteMatcher {}

class _FakeRouteCollection_2 extends _i1.Fake implements _i3.RouteCollection {}

class _FakeRouteData_3 extends _i1.Fake implements _i4.RouteData {}

class _FakeAutoRoutePage_4<T> extends _i1.Fake implements _i4.AutoRoutePage<T> {
}

class _FakeNavigationHistory_5 extends _i1.Fake
    implements _i4.NavigationHistory {}

class _FakeLocalKey_6 extends _i1.Fake implements _i5.LocalKey {}

class _FakePagelessRoutesObserver_7 extends _i1.Fake
    implements _i6.PagelessRoutesObserver {}

class _FakeGlobalKey_8<T extends _i5.State<_i5.StatefulWidget>> extends _i1.Fake
    implements _i5.GlobalKey<T> {}

class _FakeStackRouter_9 extends _i1.Fake implements _i4.StackRouter {}

class _FakeRouteMatch_10<T> extends _i1.Fake implements _i4.RouteMatch<T> {}

class _FakeAutoRouteInformationProvider_11 extends _i1.Fake
    implements _i4.AutoRouteInformationProvider {}

class _FakeAutoRouterDelegate_12 extends _i1.Fake
    implements _i4.AutoRouterDelegate {}

class _FakeDefaultRouteParser_13 extends _i1.Fake
    implements _i4.DefaultRouteParser {}

class _FakeRoutingController_14 extends _i1.Fake
    implements _i4.RoutingController {}

/// A class which mocks [AppRouter].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppRouter extends _i1.Mock implements _i7.AppRouter {
  MockAppRouter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthGuard get authGuard =>
      (super.noSuchMethod(Invocation.getter(#authGuard),
          returnValue: _FakeAuthGuard_0()) as _i2.AuthGuard);
  @override
  Map<String, _i4.PageFactory> get pagesMap =>
      (super.noSuchMethod(Invocation.getter(#pagesMap),
              returnValue: <String, _i4.PageFactory>{})
          as Map<String, _i4.PageFactory>);
  @override
  List<_i4.RouteConfig> get routes =>
      (super.noSuchMethod(Invocation.getter(#routes),
          returnValue: <_i4.RouteConfig>[]) as List<_i4.RouteConfig>);
  @override
  _i3.RouteMatcher get matcher =>
      (super.noSuchMethod(Invocation.getter(#matcher),
          returnValue: _FakeRouteMatcher_1()) as _i3.RouteMatcher);
  @override
  _i3.RouteCollection get routeCollection =>
      (super.noSuchMethod(Invocation.getter(#routeCollection),
          returnValue: _FakeRouteCollection_2()) as _i3.RouteCollection);
  @override
  _i4.RouteData get routeData =>
      (super.noSuchMethod(Invocation.getter(#routeData),
          returnValue: _FakeRouteData_3()) as _i4.RouteData);
  @override
  bool get managedByWidget => (super
          .noSuchMethod(Invocation.getter(#managedByWidget), returnValue: false)
      as bool);
  @override
  _i4.PageBuilder get pageBuilder => (super.noSuchMethod(
          Invocation.getter(#pageBuilder),
          returnValue: (_i4.RouteData data) => _FakeAutoRoutePage_4<dynamic>())
      as _i4.PageBuilder);
  @override
  _i4.NavigationHistory get navigationHistory =>
      (super.noSuchMethod(Invocation.getter(#navigationHistory),
          returnValue: _FakeNavigationHistory_5()) as _i4.NavigationHistory);
  @override
  _i5.LocalKey get key => (super.noSuchMethod(Invocation.getter(#key),
      returnValue: _FakeLocalKey_6()) as _i5.LocalKey);
  @override
  _i6.PagelessRoutesObserver get pagelessRoutesObserver =>
      (super.noSuchMethod(Invocation.getter(#pagelessRoutesObserver),
              returnValue: _FakePagelessRoutesObserver_7())
          as _i6.PagelessRoutesObserver);
  @override
  int get stateHash =>
      (super.noSuchMethod(Invocation.getter(#stateHash), returnValue: 0)
          as int);
  @override
  _i5.GlobalKey<_i5.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(Invocation.getter(#navigatorKey),
              returnValue: _FakeGlobalKey_8<_i5.NavigatorState>())
          as _i5.GlobalKey<_i5.NavigatorState>);
  @override
  bool get canPopSelfOrChildren =>
      (super.noSuchMethod(Invocation.getter(#canPopSelfOrChildren),
          returnValue: false) as bool);
  @override
  _i4.RouteData get current => (super.noSuchMethod(Invocation.getter(#current),
      returnValue: _FakeRouteData_3()) as _i4.RouteData);
  @override
  _i4.RouteData get topRoute =>
      (super.noSuchMethod(Invocation.getter(#topRoute),
          returnValue: _FakeRouteData_3()) as _i4.RouteData);
  @override
  bool get hasPagelessTopRoute =>
      (super.noSuchMethod(Invocation.getter(#hasPagelessTopRoute),
          returnValue: false) as bool);
  @override
  List<_i4.AutoRoutePage<dynamic>> get stack =>
      (super.noSuchMethod(Invocation.getter(#stack),
              returnValue: <_i4.AutoRoutePage<dynamic>>[])
          as List<_i4.AutoRoutePage<dynamic>>);
  @override
  bool get hasEntries =>
      (super.noSuchMethod(Invocation.getter(#hasEntries), returnValue: false)
          as bool);
  @override
  List<_i4.RoutingController> get childControllers => (super.noSuchMethod(
      Invocation.getter(#childControllers),
      returnValue: <_i4.RoutingController>[]) as List<_i4.RoutingController>);
  @override
  List<_i4.RouteData> get stackData =>
      (super.noSuchMethod(Invocation.getter(#stackData),
          returnValue: <_i4.RouteData>[]) as List<_i4.RouteData>);
  @override
  bool get isTopMost =>
      (super.noSuchMethod(Invocation.getter(#isTopMost), returnValue: false)
          as bool);
  @override
  bool get canNavigateBack => (super
          .noSuchMethod(Invocation.getter(#canNavigateBack), returnValue: false)
      as bool);
  @override
  _i4.StackRouter get root => (super.noSuchMethod(Invocation.getter(#root),
      returnValue: _FakeStackRouter_9()) as _i4.StackRouter);
  @override
  bool get isRoot =>
      (super.noSuchMethod(Invocation.getter(#isRoot), returnValue: false)
          as bool);
  @override
  _i4.RouteMatch<dynamic> get topMatch => (super.noSuchMethod(
      Invocation.getter(#topMatch),
      returnValue: _FakeRouteMatch_10<dynamic>()) as _i4.RouteMatch<dynamic>);
  @override
  List<_i4.RouteMatch<dynamic>> get currentSegments =>
      (super.noSuchMethod(Invocation.getter(#currentSegments),
              returnValue: <_i4.RouteMatch<dynamic>>[])
          as List<_i4.RouteMatch<dynamic>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.AutoRouteInformationProvider routeInfoProvider(
          {_i5.RouteInformation? initialRouteInformation}) =>
      (super.noSuchMethod(
              Invocation.method(#routeInfoProvider, [],
                  {#initialRouteInformation: initialRouteInformation}),
              returnValue: _FakeAutoRouteInformationProvider_11())
          as _i4.AutoRouteInformationProvider);
  @override
  _i4.AutoRouterDelegate declarativeDelegate(
          {_i4.RoutesBuilder? routes,
          String? navRestorationScopeId,
          _i4.RoutePopCallBack? onPopRoute,
          _i4.OnNavigateCallBack? onNavigate,
          _i4.NavigatorObserversBuilder? navigatorObservers =
              _i8.AutoRouterDelegate.defaultNavigatorObserversBuilder}) =>
      (super.noSuchMethod(
          Invocation.method(#declarativeDelegate, [], {
            #routes: routes,
            #navRestorationScopeId: navRestorationScopeId,
            #onPopRoute: onPopRoute,
            #onNavigate: onNavigate,
            #navigatorObservers: navigatorObservers
          }),
          returnValue: _FakeAutoRouterDelegate_12()) as _i4.AutoRouterDelegate);
  @override
  _i4.AutoRouterDelegate delegate(
          {List<_i4.PageRouteInfo<dynamic>>? initialRoutes,
          String? initialDeepLink,
          String? navRestorationScopeId,
          _i5.WidgetBuilder? placeholder,
          _i4.NavigatorObserversBuilder? navigatorObservers =
              _i8.AutoRouterDelegate.defaultNavigatorObserversBuilder}) =>
      (super.noSuchMethod(
          Invocation.method(#delegate, [], {
            #initialRoutes: initialRoutes,
            #initialDeepLink: initialDeepLink,
            #navRestorationScopeId: navRestorationScopeId,
            #placeholder: placeholder,
            #navigatorObservers: navigatorObservers
          }),
          returnValue: _FakeAutoRouterDelegate_12()) as _i4.AutoRouterDelegate);
  @override
  _i4.DefaultRouteParser defaultRouteParser(
          {bool? includePrefixMatches = false}) =>
      (super.noSuchMethod(
          Invocation.method(#defaultRouteParser, [],
              {#includePrefixMatches: includePrefixMatches}),
          returnValue: _FakeDefaultRouteParser_13()) as _i4.DefaultRouteParser);
  @override
  void updateRouteData(_i4.RouteData? data) =>
      super.noSuchMethod(Invocation.method(#updateRouteData, [data]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i9.Future<T?> pushWidget<T extends Object?>(_i5.Widget? widget,
          {_i5.RouteTransitionsBuilder? transitionBuilder,
          bool? fullscreenDialog = false,
          Duration? transitionDuration = const Duration(milliseconds: 300)}) =>
      (super.noSuchMethod(
          Invocation.method(#pushWidget, [
            widget
          ], {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration
          }),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  _i9.Future<T?> pushNativeRoute<T extends Object?>(_i5.Route<T>? route) =>
      (super.noSuchMethod(Invocation.method(#pushNativeRoute, [route]),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  _i4.RoutingController topMostRouter({bool? ignorePagelessRoutes = false}) =>
      (super.noSuchMethod(
          Invocation.method(#topMostRouter, [],
              {#ignorePagelessRoutes: ignorePagelessRoutes}),
          returnValue: _FakeRoutingController_14()) as _i4.RoutingController);
  @override
  _i9.Future<bool> pop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(Invocation.method(#pop, [result]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  void popForced<T extends Object?>([T? result]) =>
      super.noSuchMethod(Invocation.method(#popForced, [result]),
          returnValueForMissingStub: null);
  @override
  bool removeLast() => (super.noSuchMethod(Invocation.method(#removeLast, []),
      returnValue: false) as bool);
  @override
  void removeRoute(_i4.RouteData? route, {bool? notify = true}) => super
      .noSuchMethod(Invocation.method(#removeRoute, [route], {#notify: notify}),
          returnValueForMissingStub: null);
  @override
  _i9.Future<T?> push<T extends Object?>(_i4.PageRouteInfo<dynamic>? route,
          {_i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#push, [route], {#onFailure: onFailure}),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  _i9.Future<T?> replace<T extends Object?>(_i4.PageRouteInfo<dynamic>? route,
          {_i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#replace, [route], {#onFailure: onFailure}),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  _i9.Future<void> pushAll(List<_i4.PageRouteInfo<dynamic>>? routes,
          {_i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#pushAll, [routes], {#onFailure: onFailure}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> popAndPushAll(List<_i4.PageRouteInfo<dynamic>>? routes,
          {dynamic onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#popAndPushAll, [routes], {#onFailure: onFailure}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> replaceAll(List<_i4.PageRouteInfo<dynamic>>? routes,
          {_i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#replaceAll, [routes], {#onFailure: onFailure}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void popUntilRoot() =>
      super.noSuchMethod(Invocation.method(#popUntilRoot, []),
          returnValueForMissingStub: null);
  @override
  _i9.Future<T?> popAndPush<T extends Object?, TO extends Object?>(
          _i4.PageRouteInfo<dynamic>? route,
          {TO? result,
          _i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(
              #popAndPush, [route], {#result: result, #onFailure: onFailure}),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  bool removeUntil(_i4.RouteDataPredicate? predicate) =>
      (super.noSuchMethod(Invocation.method(#removeUntil, [predicate]),
          returnValue: false) as bool);
  @override
  void popUntil(_i5.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  bool removeWhere(_i4.RouteDataPredicate? predicate, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#removeWhere, [predicate], {#notify: notify}),
          returnValue: false) as bool);
  @override
  void updateDeclarativeRoutes(List<_i4.PageRouteInfo<dynamic>>? routes) =>
      super.noSuchMethod(Invocation.method(#updateDeclarativeRoutes, [routes]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> navigateAll(List<_i4.RouteMatch<dynamic>>? routes,
          {_i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#navigateAll, [routes], {#onFailure: onFailure}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<T?> pushAndPopUntil<T extends Object?>(
          _i4.PageRouteInfo<dynamic>? route,
          {_i5.RoutePredicate? predicate,
          _i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#pushAndPopUntil, [route],
              {#predicate: predicate, #onFailure: onFailure}),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  _i9.Future<T?> replaceNamed<T extends Object?>(String? path,
          {bool? includePrefixMatches = false,
          _i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#replaceNamed, [
            path
          ], {
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure
          }),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  _i9.Future<T?> pushNamed<T extends Object?>(String? path,
          {bool? includePrefixMatches = false,
          _i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamed, [
            path
          ], {
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure
          }),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  void popUntilRouteWithName(String? name) =>
      super.noSuchMethod(Invocation.method(#popUntilRouteWithName, [name]),
          returnValueForMissingStub: null);
  @override
  void markUrlStateForReplace() =>
      super.noSuchMethod(Invocation.method(#markUrlStateForReplace, []),
          returnValueForMissingStub: null);
  @override
  void attachChildController(_i4.RoutingController? childController) =>
      super.noSuchMethod(
          Invocation.method(#attachChildController, [childController]),
          returnValueForMissingStub: null);
  @override
  void removeChildController(_i4.RoutingController? childController) =>
      super.noSuchMethod(
          Invocation.method(#removeChildController, [childController]),
          returnValueForMissingStub: null);
  @override
  void notifyAll({bool? forceUrlRebuild = false}) => super.noSuchMethod(
      Invocation.method(#notifyAll, [], {#forceUrlRebuild: forceUrlRebuild}),
      returnValueForMissingStub: null);
  @override
  bool isRouteActive(String? routeName) =>
      (super.noSuchMethod(Invocation.method(#isRouteActive, [routeName]),
          returnValue: false) as bool);
  @override
  bool isRouteDataActive(_i4.RouteData? data) =>
      (super.noSuchMethod(Invocation.method(#isRouteDataActive, [data]),
          returnValue: false) as bool);
  @override
  bool isPathActive(String? path) =>
      (super.noSuchMethod(Invocation.method(#isPathActive, [path]),
          returnValue: false) as bool);
  @override
  _i9.Future<dynamic> navigate(_i4.PageRouteInfo<dynamic>? route,
          {_i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#navigate, [route], {#onFailure: onFailure}),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<void> navigateNamed(String? path,
          {bool? includePrefixMatches = false,
          _i4.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#navigateNamed, [
            path
          ], {
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void navigateBack() =>
      super.noSuchMethod(Invocation.method(#navigateBack, []),
          returnValueForMissingStub: null);
  @override
  T? innerRouterOf<T extends _i4.RoutingController>(String? routeName) =>
      (super.noSuchMethod(Invocation.method(#innerRouterOf, [routeName]))
          as T?);
  @override
  _i9.Future<bool> popTop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(Invocation.method(#popTop, [result]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
